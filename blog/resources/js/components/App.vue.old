<template>
<div id="sort-bar">
<select name="sortBy" id="select" v-model="sortBy">
	<option value="alphabetically">Alphabetically</option>
	<option value="cookingTime">Cooking Time</option>
</select>
	<button v-on:click="ascending = !ascending" class="sort-button">
	</button>
	<input type="text" v-model="searchValue" placeholder="Search Recipe" id="search-input"></input>
	<i class="fa fa-search"></i>
	

	<div class="container">
	<h3 class="p-3 text-center">Vue.js - Display a list of items with v-for</h3>
	<table class="table table-striped table-bordered">
	<thead>
	<tr>
		<th>Name</th>
		<th>Email</th>
		<th>Role</th>
	</tr>
	</thead>
	<tbody>
	<tr v-for="item in items" :key="item.id">
	<td>{{item.firstName}} {{item.lastName}}</td>
	<td>{{item.email}}</td>
	<td>{{item.role}}</td>
	</tr>
	</tbody>
	</table>
</div>
</div>
</template>

<script>
export default {
    data() {
        return {
	items: [
	{ firstName: 'Frank', lastName: 'Murphy', email: 'frank.murphy@test.com', role: 'User' },
	{ firstName: 'Vic', lastName: 'Reynolds', email: 'vic.reynolds@test.com', role: 'Admin' },
	{ firstName: 'Gina', lastName: 'Jabowski', email: 'gina.jabowski@test.com', role: 'Admin' },
	{ firstName: 'Jessi', lastName: 'Glaser', email: 'jessi.glaser@test.com', role: 'User' },
	{ firstName: 'Jay', lastName: 'Bilzerian', email: 'jay.bilzerian@test.com', role: 'User' }
	]
	};
},
computed: {
	filteredRecipes() {
	let tempRecipes = this.recipes
	
	// Process search input
	if (this.searchValue != '' && this.searchValue) {
	tempRecipes = tempRecipes.filter((item) => {
	 return item.firtName
	.toUpperCase()
	.includes(this.searchValue.toUpperCase())
	})
	return tempRecipes	
	}
}
}
};

</script>
